/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.intesoft.puntoventa.formularios;

import com.intesoft.puntoventa.controller.DescripcionOperacionController;
import com.intesoft.puntoventa.controller.InventarioController;
import com.intesoft.puntoventa.controller.MaestroController;
import com.intesoft.puntoventa.controller.OperacionController;
import com.intesoft.puntoventa.entity.DescripcionOperacion;
import com.intesoft.puntoventa.entity.Inventario;
import com.intesoft.puntoventa.entity.Maestro;
import com.intesoft.puntoventa.entity.Operacion;
import com.intesoft.puntoventa.entity.Usuarios;
import com.intesoft.puntoventa.util.MonedaTransform;
import com.intesoft.puntoventa.util.NumericValidator;
import com.intesoft.puntoventa.util.Operaciones;
import java.text.DecimalFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author alejo
 */
public class IngresoInventario extends javax.swing.JDialog {

    /**
     * Creates new form CreacionProductos
     */
    Maestro maestro;
    ControlInventario controlInventario;
    MonedaTransform monedaTransform;
    private Usuarios usuario;
    private NumericValidator numericValidator;
    private double ganancia;
    private DecimalFormat formato;
    private Inventario inventario;
    private Operacion operacion;
    private DescripcionOperacion descripcionOperacion;

    public IngresoInventario() {
        initComponents();
    }

    public IngresoInventario(ControlInventario controlInventario, Usuarios usuario) {
        this.controlInventario = controlInventario;
        this.maestro = new Maestro();
        this.monedaTransform = new MonedaTransform();
        this.usuario = usuario;
        this.numericValidator = new NumericValidator();
        this.formato = formato = new DecimalFormat("#.##");
        initComponents();

    }

    public IngresoInventario(ControlInventario controlInventario, Usuarios usuario, Inventario inventario) {
        this.controlInventario = controlInventario;
        this.maestro = new Maestro();
        this.monedaTransform = new MonedaTransform();
        this.usuario = usuario;
        this.numericValidator = new NumericValidator();
        this.formato = formato = new DecimalFormat("#.##");
        this.inventario = inventario;
        this.operacion = inventario.getOperacion();
        this.maestro = inventario.getCodigo();
        initComponents();
        setModificarInventario();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextTipo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextDescripcion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextTalla = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextVCompra = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextIva = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextTCompra = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextGanancia = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTextVVenta = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jTextColor = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextCantidad = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        setTitle("Control Inventario");
        setResizable(false);

        jLabel1.setText("Codigo");

        jLabel2.setText("Tipo");

        jLabel3.setText("Descripcion");

        jLabel4.setText("Talla");

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/crear.png"))); // NOI18N
        jButton2.setText("Crear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/archivo.png"))); // NOI18N
        jButton3.setText("Cancelar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel5.setText("Valor Compra");

        jTextVCompra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextVCompraKeyTyped(evt);
            }
        });

        jLabel6.setText("IVA");

        jTextIva.setText("19");

        jLabel7.setText("Total Compra");

        jTextTCompra.setEditable(false);

        jLabel8.setText("% Ganancia");

        jTextGanancia.setText("40");
        jTextGanancia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextGananciaKeyTyped(evt);
            }
        });

        jLabel9.setText("Valor Venta");

        jTextVVenta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextVVentaKeyTyped(evt);
            }
        });

        jButton1.setText("Validar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setText("Color");

        jLabel11.setText("Cantidad");

        jCheckBox1.setText("IVA");
        jCheckBox1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(55, 55, 55)
                        .addComponent(jTextCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addComponent(jTextTalla, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(62, 62, 62)
                        .addComponent(jTextColor, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextTCompra, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jTextVVenta)
                            .addComponent(jTextGanancia, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextIva, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1))
                            .addComponent(jTextVCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextTalla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jTextCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jTextVCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextIva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jCheckBox1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextTCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextGanancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextVVenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed
    private void setModificarInventario() {
        String codigo = this.inventario.getCodigo().getCodigo();
        this.jTextCodigo.setText(codigo.substring(0, codigo.length() - 2));
        this.jTextTipo.setText(codigo.substring(codigo.length() - 2, codigo.length()));
        this.jTextDescripcion.setText(this.inventario.getCodigo().getDescripcion());
        this.jTextTalla.setText(this.inventario.getCodigo().getTalla());
        this.jTextColor.setText(this.inventario.getCodigo().getColor());
        this.jTextCantidad.setText(String.valueOf(this.inventario.getCantidad()));
        this.jTextVCompra.setText(monedaTransform.formatMoneda(this.inventario.getValorCompra()));
        this.jTextIva.setText(String.valueOf(this.inventario.getIva() * 100));
        this.jTextTCompra.setText(monedaTransform.formatMoneda(this.inventario.getTotalCompra()));
        this.jTextGanancia.setText(String.valueOf(this.inventario.getPorcentajeGanancia() * 100));
        this.jTextVVenta.setText(monedaTransform.formatMoneda(this.inventario.getValorVenta()));
        this.jButton2.setText("Modificar");

    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (this.jButton2.getText() == "Modificar") {
            modificarInventario();
        } else {
            crearInventario();
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    private void modificarInventario() {
        String codigo = this.jTextCodigo.getText() + jTextTipo.getText();
        String descripcion = jTextDescripcion.getText();
        String tipo = this.jTextTipo.getText();
        String talla = this.jTextTalla.getText();
        String color = this.jTextColor.getText();
        this.ganancia = Double.parseDouble(this.jTextGanancia.getText());
        if (descripcion.isBlank() || tipo.isBlank() || talla.isBlank() || color.isBlank() || codigo.isBlank()) {
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar diligenciados", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        MaestroController maestroController = new MaestroController();
        InventarioController inventarioController = new InventarioController();
        DescripcionOperacionController descripcionOperacionController = new DescripcionOperacionController();
        OperacionController operacionController = new OperacionController();
        String codigo2 = this.maestro.getCodigo();
        if (codigo2.equals(codigo)) {
            this.maestro.setDescripcion(descripcion);
            this.maestro.setTalla(talla);
            this.maestro.setColor(color);
            this.descripcionOperacion = descripcionOperacionController.getDescripcionOperacionByOperacion(this.operacion);

        } else {
            descripcionOperacionController.deleteDescripcionOperacion(this.operacion);
            inventarioController.deleteInventario(this.inventario.getId());
            operacionController.removeOperacion(this.operacion);
            maestroController.deleteProducto(this.maestro.getCodigo());

            this.maestro = null;
            this.operacion = new Operacion();
            this.descripcionOperacion = new DescripcionOperacion();
            this.inventario = new Inventario();

        }
        String vVenta = this.jTextVVenta.getText();
        String iva = this.jTextIva.getText();
        String totalCompra = this.jTextTCompra.getText();
        String ganancia = String.valueOf(this.ganancia);
        String vCompra = this.jTextVCompra.getText();
        String cantidad = this.jTextCantidad.getText();

        if (vVenta.isBlank() || iva.isBlank() || totalCompra.isBlank() || ganancia.isBlank()
                || vCompra.isBlank() || cantidad.isBlank() || cantidad == "0") {

            JOptionPane.showMessageDialog(null, "Todos los campos deben estar diligenciados", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            if (this.maestro == null) {
                int option = JOptionPane.showConfirmDialog(null,
                        "Esta seguro de modificar el codigo del producto", "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    if (this.jTextTipo.getText().length() != 2) {
                        JOptionPane.showMessageDialog(null, "El tipo debe tener dos digitos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    this.maestro = new Maestro();
                    this.maestro.setCodigo(this.jTextCodigo.getText() + this.jTextTipo.getText());
                    this.maestro.setDescripcion(this.jTextDescripcion.getText());
                    this.maestro.setTalla(this.jTextTalla.getText());
                    this.maestro.setColor(this.jTextColor.getText());
                    maestroController.crearProducto(this.maestro);
                } else if (option == JOptionPane.NO_OPTION) {
                    this.jTextCodigo.setText("");
                    this.jTextTipo.setText("");
                    this.jTextDescripcion.setText("");
                    this.jTextTalla.setText("");
                    this.jTextColor.setText("");

                } else if (option == JOptionPane.CANCEL_OPTION) {
                    return;

                }
            } else {
                maestroController.ModificarProducto(this.maestro);
            }
            try {
                descripcionOperacionController = new DescripcionOperacionController();
                inventarioController = new InventarioController();
                operacionController = new OperacionController();
                inventario.setCodigo(this.maestro);
                inventario.setCantidad(Integer.parseInt(this.jTextCantidad.getText()));
                inventario.setValorCompra(monedaTransform.transfrormMoneda(this.jTextVCompra.getText()));
                inventario.setIva(Float.parseFloat(this.jTextIva.getText()) / 100);
                inventario.setTotalCompra(monedaTransform.transfrormMoneda(this.jTextTCompra.getText()));
                inventario.setPorcentajeGanancia(Float.parseFloat(String.valueOf(this.ganancia / 100)));
                inventario.setValorVenta(monedaTransform.transfrormMoneda(this.jTextVVenta.getText()));
                this.operacion.setFecha(new Date());
                this.operacion.setOperacion(Operaciones.COMPRAPRODUCTOS.toString());
                this.operacion.setUsuario(this.usuario.getNombres() + " " + this.usuario.getApellidos());
                this.operacion.setValor(inventario.getTotalCompra() * inventario.getCantidad() * -1);
               
                if(this.operacion.getIdOperacion() != 0){
                     operacionController.updateOperacion(this.operacion);
                }else{
                     operacionController.saveOperacion(this.operacion);
                }
                inventario.setOperacion(this.operacion);
                if (inventario.getId() != 0){
                    inventarioController.modifyInventario(inventario);
                }else{
                    inventarioController.insertInventario(inventario);
                }
                

                
                
                descripcionOperacion.setOperacion(operacion);
                descripcionOperacion.setDescripcion("Ingreso compra de productos al inventario");
                if(this.descripcionOperacion.getId() != 0){
                    descripcionOperacionController.updateDescripcionOperacion(descripcionOperacion);
                }else{
                    descripcionOperacionController.saveDescripcionOperacion(descripcionOperacion);
                }
                

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Hubo un error en la actualizacion del (los) productos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                e.printStackTrace();
                return;

            }
            controlInventario.updateTable();
            JOptionPane.showMessageDialog(null, "Modificado con exito", "Advertencia", JOptionPane.WARNING_MESSAGE);
            this.dispose();
        }
    }

    private void crearInventario() {
        String codigo = this.jTextCodigo.getText() + jTextTipo.getText();
        String descripcion = jTextDescripcion.getText();
        String tipo = this.jTextTipo.getText();
        String talla = this.jTextTalla.getText();
        String color = this.jTextColor.getText();
        this.ganancia = Double.parseDouble(this.jTextGanancia.getText());
        if (descripcion.isBlank() || tipo.isBlank() || talla.isBlank() || color.isBlank() || codigo.isBlank()) {
            JOptionPane.showMessageDialog(null, "Todos los campos deben estar diligenciados", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        MaestroController maestroController = new MaestroController();
        this.maestro = maestroController.getProducto(codigo);

        String vVenta = this.jTextVVenta.getText();
        String iva = this.jTextIva.getText();
        String totalCompra = this.jTextTCompra.getText();
        String ganancia = String.valueOf(this.ganancia);
        String vCompra = this.jTextVCompra.getText();
        String cantidad = this.jTextCantidad.getText();
        

        if (vVenta.isBlank() || iva.isBlank() || totalCompra.isBlank() || ganancia.isBlank()
                || vCompra.isBlank() || cantidad.isBlank() || cantidad == "0") {

            JOptionPane.showMessageDialog(null, "Todos los campos deben estar diligenciados", "Advertencia", JOptionPane.WARNING_MESSAGE);

        } else {
            if (this.maestro == null) {
                int option = JOptionPane.showConfirmDialog(null,
                        "Este seria un producto nuevo esta seguro de crearlo", "Advertencia", JOptionPane.YES_NO_CANCEL_OPTION);
                if (option == JOptionPane.YES_OPTION) {
                    if (this.jTextTipo.getText().length() != 2) {
                        JOptionPane.showMessageDialog(null, "El tipo debe tener dos digitos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    this.maestro = new Maestro();
                    this.maestro.setCodigo(this.jTextCodigo.getText() + this.jTextTipo.getText());
                    this.maestro.setDescripcion(this.jTextDescripcion.getText());
                    this.maestro.setTalla(this.jTextTalla.getText());
                    this.maestro.setColor(this.jTextColor.getText());
                    maestroController.crearProducto(maestro);
                } else if (option == JOptionPane.NO_OPTION) {
                    this.jTextCodigo.setText("");
                    this.jTextTipo.setText("");
                    this.jTextDescripcion.setText("");
                    this.jTextTalla.setText("");
                    this.jTextColor.setText("");

                } else if (option == JOptionPane.CANCEL_OPTION) {
                    return;

                }
            }
            try {
                DescripcionOperacionController descripcionOperacionController = new DescripcionOperacionController();
                DescripcionOperacion descripcionOperacion = new DescripcionOperacion();
                InventarioController inventarioController = new InventarioController();
                OperacionController operacionController = new OperacionController();
                Operacion operacion = new Operacion();
                Inventario inventario = new Inventario();
                inventario.setCodigo(this.maestro);
                inventario.setCantidad(Integer.parseInt(this.jTextCantidad.getText()));
                inventario.setValorCompra(monedaTransform.transfrormMoneda(this.jTextVCompra.getText()));
                inventario.setIva(Float.parseFloat(this.jTextIva.getText()) / 100);
                inventario.setTotalCompra(monedaTransform.transfrormMoneda(this.jTextTCompra.getText()));
                inventario.setPorcentajeGanancia(Float.parseFloat(String.valueOf(this.ganancia / 100)));
                inventario.setValorVenta(monedaTransform.transfrormMoneda(this.jTextVVenta.getText()));
                operacion.setIdOperacion(0);
                operacion.setFecha(new Date());
                operacion.setOperacion(Operaciones.COMPRAPRODUCTOS.toString());
                operacion.setUsuario(this.usuario.getNombres() + " " + this.usuario.getApellidos());
                operacion.setValor(inventario.getTotalCompra() * inventario.getCantidad() * -1);
                operacionController.saveOperacion(operacion);
                inventario.setOperacion(operacion);
                inventarioController.insertInventario(inventario);
                descripcionOperacion.setOperacion(operacion);
                descripcionOperacion.setDescripcion("Ingreso compra de productos al inventario");
                descripcionOperacionController.saveDescripcionOperacion(descripcionOperacion);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Hubo un error en el ingreso del (los) productos", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;

            }
            controlInventario.updateTable();
            JOptionPane.showMessageDialog(null, "Ingresado con exito", "Advertencia", JOptionPane.WARNING_MESSAGE);
            this.dispose();
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String codigo = jTextCodigo.getText() + jTextTipo.getText();
        MaestroController maestroController = new MaestroController();
        this.maestro = maestroController.getProducto(codigo);
        if (this.maestro == null) {
            JOptionPane.showMessageDialog(null, "El producto solicitado no existe", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        this.jTextDescripcion.setText(this.maestro.getDescripcion());
        this.jTextTalla.setText(this.maestro.getTalla());
        this.jTextColor.setText(this.maestro.getColor());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextVCompraKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextVCompraKeyTyped
        String valorCompra = jTextVCompra.getText();
        String iva = jTextIva.getText();
        boolean flag = false;
        if (valorCompra.isBlank()) {
            valorCompra = "0";
            flag = true;
        }
        if (iva.isBlank()) {
            iva = "0";
        }
        char[] p = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '\b', '\0'};
        int b = 0;
        for (int i = 0; i < p.length; i++) {
            if (p[i] == evt.getKeyChar()) {
                String letra = String.valueOf(evt.getKeyChar());
                String actual = this.jTextVCompra.getText();
                evt.consume();
                if (flag) {
                    this.jTextVCompra.setText(monedaTransform.formatMoneda(Double.parseDouble(letra)));
                    this.jTextTCompra.setText(this.monedaTransform.formatMoneda(calculoValor(Double.parseDouble(letra), Double.parseDouble(iva))));
                    calculateTotalVenta("");
                } else {
                    String monedalimpia = String.valueOf(monedaTransform.transfrormMoneda(actual));
                    monedalimpia = monedalimpia.substring(0, monedalimpia.length() - 2);
                    this.jTextVCompra.setText(monedaTransform.formatMoneda(Double.parseDouble(monedalimpia + letra)));
                    this.jTextTCompra.setText(this.monedaTransform.formatMoneda(
                            calculoValor(Double.parseDouble(monedalimpia + letra), Double.parseDouble(iva))));
                    calculateTotalVenta("");
                }
                return;
            }

        }

        evt.consume();
        JOptionPane.showMessageDialog(null, "No es un caracter valido", "Advertencia", JOptionPane.WARNING_MESSAGE);


    }//GEN-LAST:event_jTextVCompraKeyTyped

    private void jCheckBox1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        if (this.jCheckBox1.isSelected()) {
            this.jTextIva.setText("0");
        } else {
            this.jTextIva.setText("19");
        }
        String vCompra = this.jTextVCompra.getText();
        if (vCompra.isBlank()) {
            return;
        }
        if (vCompra != "0") {
            String monedalimpia = String.valueOf(monedaTransform.transfrormMoneda(vCompra));
            monedalimpia = monedalimpia.substring(0, monedalimpia.length() - 2);
            this.jTextVCompra.setText(monedaTransform.formatMoneda(Double.parseDouble(monedalimpia)));
            this.jTextTCompra.setText(this.monedaTransform.formatMoneda(
                    calculoValor(Double.parseDouble(monedalimpia), Double.parseDouble(jTextIva.getText()))));
        }
    }//GEN-LAST:event_jCheckBox1StateChanged

    private void jTextGananciaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextGananciaKeyTyped
        String tecla = String.valueOf(evt.getKeyChar());
        char[] p = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '\b', '\0', '.'};
        int b = 0;
        for (int i = 0; i < p.length; i++) {
            if (evt.getKeyChar() == '\b' || evt.getKeyChar() == '\0') {
                tecla = "";
                calculateTotalVenta(tecla);
                return;
            }
            if (p[i] == evt.getKeyChar()) {
                calculateTotalVenta(tecla);
                return;

            }

        }
        this.ganancia = Double.parseDouble(jTextGanancia.getText());
        evt.consume();
        JOptionPane.showMessageDialog(null, "No es un caracter valido", "Advertencia", JOptionPane.WARNING_MESSAGE);


    }//GEN-LAST:event_jTextGananciaKeyTyped

    private void jTextVVentaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextVVentaKeyTyped
        String precioCompra = jTextVCompra.getText();
        String precioVenta = this.jTextVVenta.getText();
        boolean flag = false;
        if (precioVenta.isBlank() || precioCompra.isBlank()) {
            precioVenta = "";
        }

        if (precioCompra.isBlank()) {
            evt.consume();
            JOptionPane.showMessageDialog(null, "Debe ingresar un precio de compra", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        numericValidator.validation(evt);
        if (numericValidator.getFlag()) {
            return;
        }

        String monedalimpia = String.valueOf(monedaTransform.transfrormMoneda(precioVenta + evt.getKeyChar()));
        double monedaDouble = Double.parseDouble(monedalimpia);
        this.jTextVVenta.setText(monedaTransform.formatMoneda(monedaDouble));
        if ((monedaDouble - monedaTransform.transfrormMoneda(this.jTextVCompra.getText())) > 0) {
            this.ganancia = ((monedaDouble / monedaTransform.transfrormMoneda(this.jTextTCompra.getText()) - 1) * 100);
            this.jTextGanancia.setText(formato.format(this.ganancia).replace(",", "."));
        }
        evt.consume();

    }//GEN-LAST:event_jTextVVentaKeyTyped

    public double calculoValor(double valor, double porcentaje) {
        double resultado = 0;
        String conversor = "";
        resultado = (valor * ((porcentaje / 100) + 1));
        return resultado;
    }

    public void calculateTotalVenta(String tecla) {
        if (tecla.isBlank()) {
            tecla = "";
        }

        String totalCompra = jTextTCompra.getText();
        String ganancia = jTextGanancia.getText() + tecla;
        if (totalCompra.isBlank()) {
            jTextVVenta.setText(monedaTransform.formatMoneda(0));
        } else if (ganancia == "0" || ganancia.isBlank()) {
            this.jTextVVenta.setText(monedaTransform.formatMoneda(0));
            JOptionPane.showMessageDialog(null, "la ganancia no puede ser 0 (cero)", "Advertencia", JOptionPane.WARNING_MESSAGE);
        } else {

            jTextVVenta.setText(monedaTransform.formatMoneda(monedaTransform.transfrormMoneda(totalCompra) * ((Double.parseDouble(ganancia) / 100) + 1)));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IngresoInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IngresoInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IngresoInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IngresoInventario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IngresoInventario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextCantidad;
    private javax.swing.JTextField jTextCodigo;
    private javax.swing.JTextField jTextColor;
    private javax.swing.JTextField jTextDescripcion;
    private javax.swing.JTextField jTextGanancia;
    private javax.swing.JTextField jTextIva;
    private javax.swing.JTextField jTextTCompra;
    private javax.swing.JTextField jTextTalla;
    private javax.swing.JTextField jTextTipo;
    private javax.swing.JTextField jTextVCompra;
    private javax.swing.JTextField jTextVVenta;
    // End of variables declaration//GEN-END:variables

}
