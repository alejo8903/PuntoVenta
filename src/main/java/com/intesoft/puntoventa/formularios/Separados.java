/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.intesoft.puntoventa.formularios;

import com.intesoft.puntoventa.controller.CreditoController;
import com.intesoft.puntoventa.controller.InventarioController;
import com.intesoft.puntoventa.controller.OperacionController;
import com.intesoft.puntoventa.controller.RegistroVendidoController;
import com.intesoft.puntoventa.dto.IngresosDto;
import com.intesoft.puntoventa.entity.Credito;
import com.intesoft.puntoventa.entity.Operacion;
import com.intesoft.puntoventa.entity.RegistroVendido;
import com.intesoft.puntoventa.entity.Usuarios;
import com.intesoft.puntoventa.util.MonedaTransform;
import com.intesoft.puntoventa.util.Operaciones;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alejo
 */
public class Separados extends javax.swing.JDialog {

    /**
     * Creates new form Separados
     */
    private static Separados instancia;
    private int idOperacion;
    private RegistroVendidoController registroVendidoController;
    private MonedaTransform monedaTransform;
    private SeparadosCreditos separadosCreditos;
    private Credito credito;
    private CreditoController creditoController;
    private OperacionController operacionController;
    private Operacion operacion;
    private RegistroVendido registroVendido;
    private InventarioController inventarioController;
    private Operaciones operaciones;
    private Usuarios usuario;

    private Separados() {
        initComponents();
    }

    private Separados(Usuarios usuario, int idOperacion, SeparadosCreditos separadosCreditos) {
        initComponents();
        this.idOperacion = idOperacion;
        monedaTransform = new MonedaTransform();
        this.separadosCreditos = separadosCreditos;
        this.inventarioController = new InventarioController();
        this.operacionController = new OperacionController();
        this.creditoController = new CreditoController();
        this.usuario = usuario;
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Id Operacion", "Codigo", "Descripcion", "Talla", "Color", "Fecha", "Usuario", "Cantidad", "Valor Venta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Eiminar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton1)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        int idOperacion = 0;
        int idRegistroVendido = 0;
        if (rowIndex >= 0) {
            idOperacion = Integer.parseInt(jTable1.getValueAt(rowIndex, 1).toString());
            idRegistroVendido = Integer.parseInt(jTable1.getValueAt(rowIndex, 0).toString());
            this.operacion = this.operacionController.getOperacionById(idOperacion);
            this.registroVendido = this.registroVendidoController.getRegistroVendidoByIdOperation(idRegistroVendido);
            this.credito = this.creditoController.getCreditByOperation(idOperacion);
            if ((credito.getTotalCredito() - registroVendido.getValorVenta()) == 0) {
                Object[] customOptions = {"Cancelar \n separado", "Cambiar \n separdo", "Cancelar"};
                int result = JOptionPane.showInternalOptionDialog(null, "Que desea realizar: ", "Proceso", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, customOptions, EXIT_ON_CLOSE);
                if (result == JOptionPane.YES_OPTION) {
                    this.inventarioController.updateInventario(registroVendido.getIdInventario(), (-1 * registroVendido.getCantidad()));
                    this.registroVendido.setDescripcion(this.registroVendido.getDescripcion() + " " + "Canelacion ceparado");
                    this.registroVendido.setCantidad(1);
                    this.registroVendido.setTotalCompra(0);
                    this.registroVendido.setValorCompra(0);
                    this.registroVendido.setPorcentajeGananciaR(1);
                    this.registroVendido.setIva(0);
                    this.registroVendido.setDescuento(0);
                    this.registroVendido.setValorVenta(this.credito.getTotalAbonado());
                    this.registroVendidoController.removeRegistroVendido(this.registroVendido);
                    this.operacion.setOperacion(Operaciones.CANCELACIONSEPARADO.toString());
                    this.operacion.setFecha(new Date());
                    this.creditoController.removeCredito(this.credito);
                    this.operacionController.updateOperacion(this.operacion);
                    this.dispose();
                } else if (result == JOptionPane.NO_OPTION) {
                    JOptionPane.showMessageDialog(null, "Recordar que el cliente abono: \n"
                            + monedaTransform.formatMoneda(this.credito.getTotalAbonado()),
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                    this.inventarioController.updateInventario(registroVendido.getIdInventario(), (-1 * registroVendido.getCantidad()));
                    this.registroVendidoController.removeRegistroVendido(this.registroVendido);
                    this.creditoController.removeCredito(this.credito);
                    this.operacionController.removeOperacion(this.operacion);
                    this.dispose();
                } else if (result == JOptionPane.CANCEL_OPTION) {
                    return;
                }

            } else {
                this.credito.setTotalCredito(this.credito.getTotalCredito() - this.registroVendido.getValorVenta());
                this.operacion.setValor(this.credito.getTotalCredito());
                this.registroVendidoController.removeRegistroVendido(this.registroVendido);
                this.creditoController.updateCredito(credito);
                this.operacionController.updateOperacion(operacion);
                this.dispose();
            }

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }

        this.separadosCreditos.updateTableSeparados();

    }//GEN-LAST:event_jButton1ActionPerformed
    
    public static Separados obtenerInstancia(Usuarios usuario, int idOperacion, SeparadosCreditos separadosCreditos) {
        if (instancia == null) {
            instancia = new Separados(usuario, idOperacion, separadosCreditos);
        }
        return instancia;
    }
    
    public boolean validarInstancia(){
        if (instancia == null) {
            return true;
        }
        return false;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Separados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Separados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Separados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Separados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Separados().setVisible(true);
            }
        });
    }

    private void updateTable() {
        registroVendidoController = new RegistroVendidoController();
        List<IngresosDto> listIngresosDto = registroVendidoController.getIngresosByIdOperation(idOperacion);
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (IngresosDto ingresosDto : listIngresosDto) {
            Object[] dataRow = {
                ingresosDto.getId(),
                ingresosDto.getIdOperacion(),
                ingresosDto.getCodigo(),
                ingresosDto.getDescripcion(),
                ingresosDto.getTalla(),
                ingresosDto.getColor(),
                ingresosDto.getFecha(),
                ingresosDto.getUsuario(),
                ingresosDto.getCantidad(),
                monedaTransform.formatMoneda(ingresosDto.getValorVenta())
            };
            model.addRow(dataRow);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
